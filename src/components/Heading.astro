---
interface Props {
  level: 1 | 2 | 3 | 4 | 5 | 6;
  class?: string;
  useBgStyle?: boolean;
}

const { level, class: className = '', useBgStyle = true } = Astro.props;

// Dynamically create the heading element based on level
const Tag = `h${level}` as keyof HTMLElementTagNameMap;

// Set default text size based on heading level
const headingSizes = {
  1: 'text-h1',
  2: 'text-h2',
  3: 'text-h3',
  4: 'text-h4',
  5: 'text-body font-bold',
  6: 'text-body font-medium'
};

// Add the yellow background styling if useBgStyle is true
const bgStyle = useBgStyle ? 'bg-accent inline-block px-6 py-2 rounded-md text-gray-700' : '';
const textSize = headingSizes[level];
---

<Tag 
  id={Astro.slots.has('default') ? 
    (await Astro.slots.render('default'))
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '') 
    : undefined
  } 
  class={`focus:outline-none focus:ring-2 focus:ring-accent-light focus:ring-offset-2 rounded-sm ${textSize} ${bgStyle} ${className}`}
  tabindex="-1"
>
  <slot />
</Tag>

<style>
  /* Ensure the focus ring is visible in dark mode */
  :global(.dark) [tabindex="-1"]:focus {
    @apply focus:ring-offset-gray-900;
  }
</style> 