---
import ThemeToggle from './ThemeToggle.astro';
import TableOfContents from './TableOfContents.astro';

const navItems = [
  { href: "/writing", label: "Writing", dotColor: "bg-primary" },
  { href: "/projects", label: "Projects", dotColor: "bg-secondary" },
  { href: "/artifacts", label: "Artifacts", dotColor: "bg-accent" },
  { href: "/contact", label: "Contact", dotColor: "bg-accent-yellow" }
];

const headings = await Astro.props.headings || [];
---

<a 
  href="#main" 
  class="sr-only focus:not-sr-only fixed top-4 left-4 bg-accent px-4 py-2 rounded-md z-50 focus-ring"
>
  Skip to content
</a>

<div class="sticky top-0 z-40 bg-surface dark:bg-dark-surface">
  <header class="border-b border-accent-yellow dark:border-accent-yellow">
    <div class="max-w-4xl mx-auto px-6 md:px-8 py-md">
      <div class="flex justify-between items-center">
        <a href="/" class="text-h3 font-medium hover:text-primary transition-colors">
          dylan isaac
        </a>
        
        <!-- Desktop/Tablet Navigation -->
        <nav class="hidden md:flex items-center gap-6 mr-8">
          {navItems.map((item, index) => (
            <>
              <a 
                href={item.href} 
                class="hover:text-primary transition-colors"
              >
                {item.label}
              </a>
              {index < navItems.length - 1 && (
                <span 
                  class={`w-1.5 h-1.5 rounded-full ${item.dotColor}`} 
                  aria-hidden="true"
                ></span>
              )}
            </>
          ))}
        </nav>

        <div class="flex items-center gap-4">
          <ThemeToggle />
          <button 
            id="menu-toggle"
            aria-label="Toggle table of contents"
            aria-expanded="false"
            aria-controls="toc-sidebar"
            class="flex flex-col gap-1.5 p-2 hover:bg-surface-secondary dark:hover:bg-dark-surface-secondary rounded-lg transition-colors"
          >
            <span class="w-5 h-0.5 bg-primary"></span>
            <span class="w-5 h-0.5 bg-secondary"></span>
            <span class="w-5 h-0.5 bg-accent"></span>
          </button>
        </div>
      </div>
    </div>
  </header>

  <!-- Table of Contents Sidebar -->
  <div 
    id="toc-sidebar"
    role="complementary"
    aria-labelledby="toc-heading"
    class="fixed right-0 top-[89px] bottom-0 w-64 bg-surface dark:bg-dark-surface transform translate-x-full transition-transform duration-200 ease-in-out overflow-y-auto"
  >
    <div class="p-6">
      <!-- Mobile-only Navigation -->
      <nav class="md:hidden space-y-8 mb-8" aria-label="Main">
        <ul class="space-y-4">
          {navItems.map((item) => (
            <li>
              <a 
                href={item.href} 
                class="block hover:text-accent transition-colors"
              >
                {item.label}
              </a>
            </li>
          ))}
        </ul>
      </nav>

      <!-- Table of Contents -->
      <nav aria-labelledby="toc-heading">
        <TableOfContents headings={headings} />
      </nav>
    </div>
  </div>
</div>

<script>
  const menuToggle = document.getElementById('menu-toggle');
  const tocSidebar = document.getElementById('toc-sidebar');
  
  // Function to check if there's enough room for the menu AND content
  // 896px (max-w-4xl) + 256px (w-64 sidebar) + 64px (padding buffer) = 1216px
  const hasEnoughRoom = () => window.innerWidth >= 1216;

  // Set initial state without animation
  if (hasEnoughRoom()) {
    tocSidebar?.classList.remove('translate-x-full');
    menuToggle?.setAttribute('aria-expanded', 'true');
  } else {
    tocSidebar?.classList.add('translate-x-full');
    menuToggle?.setAttribute('aria-expanded', 'false');
  }

  // Add transition class after initial load
  requestAnimationFrame(() => {
    tocSidebar?.classList.add('transition-transform');
  });

  // Toggle menu on button click
  menuToggle?.addEventListener('click', () => {
    const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true';
    menuToggle.setAttribute('aria-expanded', (!isExpanded).toString());
    tocSidebar?.classList.toggle('translate-x-full');
  });

  // Update menu state on resize
  window.addEventListener('resize', () => {
    const shouldExpand = hasEnoughRoom();
    menuToggle?.setAttribute('aria-expanded', shouldExpand.toString());
    tocSidebar?.classList.toggle('translate-x-full', !shouldExpand);
  });
</script>